#  ┏┓┏┳┓┏┓┳┓┏┓┓┏┳┏┓ ┳┳┓┳┳┓┳┳┳┓┏┓┓ 
#  ┗┓ ┃ ┣┫┣┫┗┓┣┫┃┃┃ ┃┃┃┃┃┃┃┃┃┃┣┫┃ 
#  ┗┛ ┻ ┛┗┛┗┗┛┛┗┻┣┛━┛ ┗┻┛┗┻┛ ┗┛┗┗┛
#                                 


command_timeout = 1000

"$schema" = 'https://starship.rs/config-schema.json'

add_newline = true 

# Left prompt format
format = """
➜\
$directory\
${custom.giturl}\
$git_branch\
$git_state\
$git_status\
$character
"""
# Right prompt format
right_format = """$all"""
[directory]
style = "blue"
format = "[ $path ]($style)"

[directory.substitutions]
"Documents" = "󰈙 "
"Downloads" = " "
"Music" = "󰝚 "
"Pictures" = " "
"Developer" = "󰲋 "

[custom.giturl]
description = "Display symbol for remote Git server"
command = """
GIT_REMOTE=$(command git ls-remote --get-url 2> /dev/null)
if [[ "$GIT_REMOTE" =~ "github" ]]; then
    GIT_REMOTE_SYMBOL=" "
elif [[ "$GIT_REMOTE" =~ "gitlab" ]]; then
    GIT_REMOTE_SYMBOL=" "
elif [[ "$GIT_REMOTE" =~ "bitbucket" ]]; then
    GIT_REMOTE_SYMBOL=" "
elif [[ "$GIT_REMOTE" =~ "git" ]]; then
    GIT_REMOTE_SYMBOL=" "
else
    GIT_REMOTE_SYMBOL=" "
fi
echo "$GIT_REMOTE_SYMBOL "
"""
when = 'git rev-parse --is-inside-work-tree 2> /dev/null'
format = "at $output"

[git_branch]
symbol = "[](bright-blue) "
style = "fg:black bg:bright-blue"
format =  '  on [$symbol$branch]($style)[](bright-blue)'



[git_status]
format = ' [($all_status$ahead_behind )]($style)'

[nodejs]
symbol = "  "
format = '[$symbol$version](fg:blue)'

[c]
symbol = "  "
format = '[$symbol$version](fg:blue)'

[rust]
symbol = "  "
format = '[$symbol$version](fg:blue)'


[golang]
symbol = "  "
format = '[$symbol$version](fg:blue)'
detect_files = ["go.mod"]

[php]
symbol = "  "
format = '[$symbol$version](fg:blue)'


[java]
symbol = "  "
format = '[$symbol$version](fg:blue)'


[kotlin]
symbol = "  "
format = '[$symbol$version](fg:blue)'


[haskell]
symbol = "  "
format = '[$symbol$version](fg:blue)'

[python]
symbol = "  "
format = '[$symbol$version](fg:blue)'


[docker_context]
symbol = "  "
format = '[ $symbol ($context) ](fg:blue)'


[cmd_duration]
format = '[󰔚 $duration](fg:white)'

[line_break]
disabled = true 

[character]
success_symbol = '[❯](bold fg:green)'
error_symbol = '[❯](bold fg:red)'

